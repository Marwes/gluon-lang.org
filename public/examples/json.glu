let de @ { Deserialize, deserializer, field, ? } = import! std.json.de
let ser @ { Serialize, ? } = import! std.json.ser
let { Result, ? } = import! std.result

#[derive(Serialize, Deserialize)]
type Vec = { x : Float, y : Float, name : Option String }

match de.deserialize deserializer r#"{ "x": 123, "y": 456.78, "name": null }"# with
| Err err -> err
| Ok v ->
    let v : Vec = v
    let updated = { x = v.x, y = v.y, name = Some "Vector" }
    match ser.to_string_pretty updated with
    | Err err -> err
    | Ok s -> s
